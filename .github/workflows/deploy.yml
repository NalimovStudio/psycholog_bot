name: Deploy to VPS

on:
  push:
    branches: [ dev_arsen ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Create test .env file
        run: |
          cat > .env << 'EOF'
          # Test Environment Configuration
          DB_DRIVER=${{ secrets.DB_DRIVER }}
          DB_SYSTEM=${{ secrets.DB_SYSTEM }}
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=test_db
          DB_USER=test_user
          DB_PASSWORD=test_password
          DB_PATH=
          
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=test
          REDIS_DATABASE=1
          
          TELEGRAM_TOKEN=test_token
          ASSISTANT_API_KEY=test_key
          
          ENVIRONMENT=test
          LOG_LEVEL=DEBUG
          EOF

      - name: Install dependencies with Poetry
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run unit tests with Poetry
        run: |
          poetry run pytest tests/ -v --tb=short



  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ GitHub Actions

      - name: Setup SSH key
        run: |
          # –°–æ–∑–¥–∞–µ–º .ssh –ø–∞–ø–∫—É
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ GitHub Secrets
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github_action_key
          chmod 600 ~/.ssh/github_action_key

          # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ known_hosts
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
          ls -la ~/.ssh/
          echo "=== Key content start ==="
          cat ~/.ssh/github_action_key
          echo "=== Key content end ==="

      - name: Verify exact key match
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/temp_key
          chmod 600 ~/.ssh/temp_key
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º fingerprint (—Å–∞–º–∞—è —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
          GENERATED_FINGERPRINT=$(ssh-keygen -l -f ~/.ssh/temp_key | awk '{print $2}')
          echo "Generated fingerprint: $GENERATED_FINGERPRINT"

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -v -i ~/.ssh/github_action_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo '‚úÖ SSH connection successful'"

      - name: Copy files with rsync
        run: |
          echo "Copying files with rsync..."
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='.env' \
            --exclude='.venv' \
            -e "ssh -i ~/.ssh/github_action_key -o StrictHostKeyChecking=no" \
            ./ \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/app/TraumaBot/

      - name: Create production .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github_action_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/app/TraumaBot
            cat > .env << 'ENV_EOF'
            DB_DRIVER=${{ secrets.DB_DRIVER }}
            DB_SYSTEM=${{ secrets.DB_SYSTEM }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME || 'psychoAI_db' }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PATH=${{ secrets.DB_PATH }}
            
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_DATABASE=${{ secrets.REDIS_DATABASE }}
          
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            ASSISTANT_API_KEY=${{ secrets.ASSISTANT_API_KEY }}
          
            YOOKASSA_WEBHOOK_URL=${{ secrets.YOOKASSA_WEBHOOK_URL }}
            WEB_HOST=${{ secrets.WEB_HOST }}
            WEB_PORT=${{ secrets.WEB_PORT }}
            DOMAIN=${{ secrets.DOMAIN }}
            TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}
          
            ENVIRONMENT=production
            LOG_LEVEL=INFO
            ENV_EOF
      
      - name: Deploy with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github_action_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/app/TraumaBot
            docker-compose down
            docker-compose pull
            docker-compose build --no-cache
            docker-compose up -d
                  
            sleep 15
            echo "=== Container status ==="
            docker-compose ps
            echo "=== Recent logs ==="
            docker-compose logs --tail=30
          EOF

      - name: Run Alembic migrations
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github_action_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/app/TraumaBot
            
            echo "‚è≥ Waiting for database..."
            for i in {1..10}; do
              if docker-compose exec -T db pg_isready -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME || 'psychoAI_db' }}; then
                echo "üöÄ Running Alembic migrations..."
                docker-compose exec -T web alembic upgrade head
                echo "‚úÖ Migrations completed"
                echo "‚úÖ Database is ready!"
                break
              fi
              sleep 3
            done
          EOF

      - name: Health check after deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github_action_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/app/TraumaBot
            echo "=== Running containers ==="
            docker-compose ps | grep -v "Exit"
            
            echo "=== Error check ==="
            docker-compose logs --tail=50 | grep -i "error\|exception\|fail" || echo "‚úì No errors found"
            
            echo "=== PostgreSQL health check ==="
            docker-compose exec -T db pg_isready -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME || 'psychoAI_db' }} && echo "‚úì PostgreSQL is healthy"
            
            echo "=== .env file check ==="
            if [ -f .env ]; then
              echo "‚úì .env file exists"
              cat .env | sed 's/=.*/=***/' | head -10
            else
              echo "‚úó .env file missing"
            fi
          EOF